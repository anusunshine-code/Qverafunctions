<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<objects adminValidationKey="bs6HzmTXUxrSR8/VWMUxSg==" adminHashType="qpbkdf2" adminSalt="O+L9krsdPLo3megBCNI6B78NKF78vD8BBwyqaXtiIHZSo6TvSNbomYbs/gQDjcb4yzkxLb4iqYK4jCWT7Spj2hZkrBtfi8GCLjs2AFfTpamNQvCT+ivrJgEDA/gbBpOXj1VdLjxsU2TTcrHxWLR6oBHU1bLpfaRqtz74erLoTp4=">
  <zone referenceId="8af894cd7a5e5e8b017a5ea1afb0005b" licenseGroupReferenceId="8a4a94c87ceded53017d06ab87980008" name="HL7 - Zone" description="All logic for building HL7 messages goes here to contain the blast radius of a release and have a known impact area" color="purple">
    <publishedFunction referenceId="8af894cd7a5e5e8b017aeeef88d8018c" name="process_ADT" description="This function determines which Hl7 ADT message to generate and calls the appropriate generation code." script="function process_ADT(changelogtype_id, client_id, clientvisit_id, hl7_version) {&#xD;&#xA;
&#xD;&#xA;
   /*&#xD;&#xA;
      The following Change Log Types will generate an ADT message:&#xD;&#xA;
   &#xD;&#xA;
            HL7    &#xD;&#xA;
      ID    Msg   Change Log Action&#xD;&#xA;
      --    ---   --------------------------------&#xD;&#xA;
      5     A04   INSERT CLIENT RECORD&#xD;&#xA;
      9     A08   INSERT CLIENT INSURANCE&#xD;&#xA;
      12    A08   INSERT CLIENT DEPENDENT&#xD;&#xA;
      15    A08   UPDATE CLIENT RECORD&#xD;&#xA;
      20    A08   UPDATE CLIENT INSURANCE&#xD;&#xA;
      23    A08   UPDATE CLIENT DEPENDENT&#xD;&#xA;
      24    A08   UPDATE CLIENTEXT RECORD&#xD;&#xA;
      28    A08   DELETE CLIENT INSURANCE&#xD;&#xA;
      42    A08   APPROVE CLIENT VISIT&#xD;&#xA;
      44    A08   UPDATE CLIENT VISIT ADD SIGNATURE&#xD;&#xA;
      89    A08   UPDATE CLIENT FROM FORM&#xD;&#xA;
      91    A08   UPDATE CLIENTEXT FROM FORM&#xD;&#xA;
      &#xD;&#xA;
      1002  A08   UPDATE CLIENT DEPENDENT 834     &#xD;&#xA;
   */&#xD;&#xA;
&#xD;&#xA;
   // VERSION HISTORY:&#xD;&#xA;
   // 2021-07-29 MAP2   - TFS 137422 - REFACTOR&#xD;&#xA;
   // 2021-08-16 FP     - TFS 134781 - Added validation to check if ADT message will be generated or not.&#xD;&#xA;
   // 2021-08-18 MAP2   - TFS 137541 - Added Guarantor Add and Update triggers.&#xD;&#xA;
   // 2021-08-24 MAP2   - TFS 138779 - added example reference for g_rest_postMessageToSplunk&#xD;&#xA;
   // 2021-10-21 JCROWE - TFS 143908 - log message to Splunk when a message can't be generated  &#xD;&#xA;
   // 2022-01-11 MAP2   - ADO 10669  - Added reference for change log types 42, and 44.&#xD;&#xA;
   // 2022-01-13 MAP2   - ADO 8238   - Modified filter processing to incorporate new requirements.&#xD;&#xA;
   // 2022-03-14 MAP2   - ADO 12888  - adjusting processing to allow for sample data.&#xD;&#xA;
   // 2022-06-24 MAP2   - TFS 17670  - Adding code to refresh the trigger lists.&#xD;&#xA;
   // 2022-08-12 EK     - ADO 19744  - Now checking for is_42cfr flag on diagnoses&#xD;&#xA;
&#xD;&#xA;
   qie.debug('in Process_ADT');&#xD;&#xA;
&#xD;&#xA;
   //TFS 138779 - EXAMPLE USAGE&#xD;&#xA;
   //g_rest_postMessageToSplunk(&quot;Processing ClientId: &quot; + client_id, &quot;Process_ADT&quot;);&#xD;&#xA;
&#xD;&#xA;
&#xD;&#xA;
   var a04_changelog_list = fn_refresh_hl7_channel_triggers(&quot;ADT&quot;, &quot;A04&quot;);&#xD;&#xA;
&#xD;&#xA;
   if (a04_changelog_list.length == 0) {&#xD;&#xA;
      a04_changelog_list = [5];&#xD;&#xA;
   }&#xD;&#xA;
&#xD;&#xA;
   var a08_changelog_list = fn_refresh_hl7_channel_triggers(&quot;ADT&quot;, &quot;A08&quot;);&#xD;&#xA;
&#xD;&#xA;
   if (a08_changelog_list.length == 0) {&#xD;&#xA;
      a08_changelog_list = [9, 12, 15, 20, 23, 24, 28, 42, 44, 89, 91, 1002];&#xD;&#xA;
   }&#xD;&#xA;
&#xD;&#xA;
   // Set our default return value to an empty message string;&#xD;&#xA;
&#xD;&#xA;
   var NO_MESSAGE_GENERATED = qie.getVariable('G_NO_MESSAGE_GENERATED');&#xD;&#xA;
   var msg = NO_MESSAGE_GENERATED;&#xD;&#xA;
   var ADT_MESSAGE_TYPE = 'ADT';&#xD;&#xA;
&#xD;&#xA;
   if (!fn_is_message_type_enabled(ADT_MESSAGE_TYPE)) {&#xD;&#xA;
      qie.info(ADT_MESSAGE_TYPE + ' is not enabled.');&#xD;&#xA;
      g_rest_postMessageToSplunk(ADT_MESSAGE_TYPE + ' is not enabled., messages will not be generated', 'process_ADT');&#xD;&#xA;
      return NO_MESSAGE_GENERATED;&#xD;&#xA;
   }&#xD;&#xA;
&#xD;&#xA;
   qie.debug(ADT_MESSAGE_TYPE + ' message type is enabled.');&#xD;&#xA;
&#xD;&#xA;
   // If the clientvisit_Id exists but no client_Id was written to the change log table,&#xD;&#xA;
   // try to get the client-id from the client visit itself.&#xD;&#xA;
&#xD;&#xA;
   qie.debug(&quot;Checking for client_Id &quot; + client_id);&#xD;&#xA;
&#xD;&#xA;
   if (client_id == 0 ||&#xD;&#xA;
      client_id == &quot;&quot; ||&#xD;&#xA;
      client_id === undefined ||&#xD;&#xA;
      client_id == null) {&#xD;&#xA;
      if (clientvisit_id !== 0 &amp;&amp;&#xD;&#xA;
         clientvisit_id !== &quot;&quot; &amp;&amp;&#xD;&#xA;
         clientvisit_id !== undefined &amp;&amp;&#xD;&#xA;
         clientvisit_id !== null) {&#xD;&#xA;
         client_id = g_da_fetch_getClientId_from_visit(clientvisit_id);&#xD;&#xA;
      }&#xD;&#xA;
   }&#xD;&#xA;
&#xD;&#xA;
   // if a valid client id was not found. Do not process this change log&#xD;&#xA;
&#xD;&#xA;
   if (client_id == 0) {&#xD;&#xA;
      qie.info(&quot;No client_id was found.  An ADT can not be processed for this request.&quot;);&#xD;&#xA;
      g_rest_postMessageToSplunk('No client_id was found.  An ADT can not be processed for this request.', 'process_ADT');&#xD;&#xA;
      return NO_MESSAGE_GENERATED;&#xD;&#xA;
   }&#xD;&#xA;
&#xD;&#xA;
   if (g_process_filterMessage8238(client_id, clientvisit_id) == true) {&#xD;&#xA;
      qie.debug(&quot;FilterMessage returned TRUE.  A Message will NOT be sent.&quot;);&#xD;&#xA;
      g_rest_postMessageToSplunk('consent filtering stopped message processing.  An ADT can not be processed for this request.', 'process_ADT');&#xD;&#xA;
      return NO_MESSAGE_GENERATED;&#xD;&#xA;
   }&#xD;&#xA;
   else {&#xD;&#xA;
      qie.debug(&quot;FilterMessage returned FALSE.  A message CAN be sent.&quot;);&#xD;&#xA;
   }&#xD;&#xA;
&#xD;&#xA;
   // 42 CFR diagnosis filtering&#xD;&#xA;
   // Note: I did not place this logic within g_process_filterMessage8238() because it only applies to ADT, not CCDs.&#xD;&#xA;
   var diagnoses = da_fetch_DiagInfo_ByClientId(client_id);&#xD;&#xA;
   for (var i = 1; i &lt;= diagnoses.getRowCount(); i++) {&#xD;&#xA;
      var is42cfrNode = diagnoses.getNode('is_42cfr', i);&#xD;&#xA;
      if (StringUtils.isBlank(is42cfrNode) === true) {&#xD;&#xA;
         continue;&#xD;&#xA;
      }&#xD;&#xA;
      var is42cfr = qie.deduceBoolean(is42cfrNode);&#xD;&#xA;
      if (is42cfr === true) {&#xD;&#xA;
         qie.info('Client Diagnosis flagged as 42 CFR, no ADT message will be created or sent as a result.');&#xD;&#xA;
         g_rest_postMessageToSplunk('Client Diagnosis flagged as 42 CFR, no ADT message will be created or sent as a result.', 'process_ADT');&#xD;&#xA;
         return NO_MESSAGE_GENERATED;&#xD;&#xA;
      }&#xD;&#xA;
   }&#xD;&#xA;
&#xD;&#xA;
   if (a04_changelog_list.indexOf(changelogtype_id) != -1) {&#xD;&#xA;
      if (hl7_version == '2.5') {&#xD;&#xA;
         qie.info('Generating ADT^A04');&#xD;&#xA;
         msg = generate_ADT_A04_2_5(client_id, clientvisit_id);&#xD;&#xA;
      }&#xD;&#xA;
   }&#xD;&#xA;
   else if (a08_changelog_list.indexOf(changelogtype_id) != -1) {&#xD;&#xA;
      if (hl7_version == '2.5') {&#xD;&#xA;
         qie.info('Generating ADT^A08');&#xD;&#xA;
         msg = generate_ADT_A08_2_5(client_id, clientvisit_id);&#xD;&#xA;
      }&#xD;&#xA;
   }&#xD;&#xA;
   else {&#xD;&#xA;
      qie.info('changelogtype_id = ' + changelogtype_id + ' is not configured to trigger an outbound ADT message.');&#xD;&#xA;
   }&#xD;&#xA;
&#xD;&#xA;
   if (msg == NO_MESSAGE_GENERATED) {&#xD;&#xA;
      qie.info('A Message could not be generated for this request.');&#xD;&#xA;
   }&#xD;&#xA;
&#xD;&#xA;
   return msg;&#xD;&#xA;
}&#xD;&#xA;
">
      <parameter order="1" name="changelogtype_id" />
      <parameter order="2" name="client_id" />
      <parameter order="3" name="clientvisit_id" />
      <parameter order="4" name="hl7_version" />
    </publishedFunction>
    <publishedFunction referenceId="8af894cd7b3fd8ee017b51b87f7000ad" name="da_fetch_DiagInfo_ByClientId" script="function da_fetch_DiagInfo_ByClientId(client_id) {&#xD;&#xA;
&#xD;&#xA;
   // VERSION HISTORY:&#xD;&#xA;
   // 2021-08-10 kbaah - TFS 137032 - REFACTORED DATABASE CONNECTION VERSION&#xD;&#xA;
   // 2021-08-23 FP    - TFS 138890 - Chanteg sql to use query parameterized.&#xD;&#xA;
   // 2021-08-26 kbaah - TFS 139130 - When an A04 or A08 message is sent it should include the DG1&#xD;&#xA;
   // 2021-08-27 MAP2  - TFS 138137 - Moved db validation to separate function.&#xD;&#xA;
   // 2021-09-02 MAP2  - TFS 139777 - Fix DG1 processing&#xD;&#xA;
   // 2022-03-11 EK    - ADO 12769  - SELECT now selecting specific columns, added [ClientVisit].[signature_datetime] subquery&#xD;&#xA;
   // 2022-03-14 MAP2  - ADO 12888  - adjusting processing to allow for sample data.&#xD;&#xA;
   // 2022-04-14 EK    - ADO 12769  - Added diagnosed_date to select query, icd9 diagnosis_dates are now pulled properly&#xD;&#xA;
   // 2022-07-25 EK    - ADO 19519  - fn_escape_reserved_hl7_characters(queryResult) added&#xD;&#xA;
   // 2022-08-12 EK    - ADO 19744  - Added is_42cfr to select query&#xD;&#xA;
&#xD;&#xA;
   var database = channelCache.getValue('database', 'N/A');&#xD;&#xA;
   var NO_DATA = null;&#xD;&#xA;
&#xD;&#xA;
   try {&#xD;&#xA;
      var sqlString = &quot;SELECT cad.clientaxisdetail_id, cad.icd10_code, i10.icd10_short_desc, cad.axis_code, a3.icd9_desc, &quot; +&#xD;&#xA;
         &quot;cad.date_created, cad.date_resolved, cad.diagnosed_date, (&quot; +&#xD;&#xA;
         &quot;   SELECT TOP (1) signature_datetime &quot; +&#xD;&#xA;
         &quot;   FROM dbo.ClientVisit cv &quot; +&#xD;&#xA;
         &quot;   WHERE client_id = ca.client_id &quot; +&#xD;&#xA;
         &quot;       AND [status] = 'COMPLETED' &quot; +&#xD;&#xA;
         &quot;       AND clientaxisdetail_id = cad.clientaxisdetail_id &quot; +&#xD;&#xA;
         &quot;       AND (&quot; +&#xD;&#xA;
         &quot;           icd10_code = cad.icd10_code OR &quot; +&#xD;&#xA;
         &quot;           icd10_code = cad.axis_code OR &quot; +&#xD;&#xA;
         &quot;           icd10_code2 = cad.icd10_code OR &quot; +&#xD;&#xA;
         &quot;           icd10_code2 = cad.axis_code OR &quot; +&#xD;&#xA;
         &quot;           icd10_code3 = cad.icd10_code OR &quot; +&#xD;&#xA;
         &quot;           icd10_code3 = cad.axis_code OR &quot; +&#xD;&#xA;
         &quot;           icd10_code4 = cad.icd10_code OR &quot; +&#xD;&#xA;
         &quot;           icd10_code4 = cad.axis_code OR &quot; +&#xD;&#xA;
         &quot;           icd10_code5 = cad.icd10_code OR &quot; +&#xD;&#xA;
         &quot;           icd10_code5 = cad.axis_code &quot; +&#xD;&#xA;
         &quot;       ) &quot; +&#xD;&#xA;
         &quot;   ORDER BY signature_datetime DESC &quot; +&#xD;&#xA;
         &quot;) as signature_datetime, cad.updatedby_emp_id, cad.is_42cfr &quot; +&#xD;&#xA;
         &quot;FROM dbo.ClientAxis ca &quot; +&#xD;&#xA;
         &quot;INNER JOIN dbo.ClientAxisDetail cad ON cad.client_axis_id = ca.client_axis_id &quot; +&#xD;&#xA;
         &quot;LEFT OUTER JOIN dbo.Axis1 a1 ON a1.axis1_id = cad.axis_id AND cad.axislevel = 1 &quot; +&#xD;&#xA;
         &quot;LEFT OUTER JOIN dbo.Axis2 a2 ON a2.axis2_id = cad.axis_id AND cad.axislevel = 2 &quot; +&#xD;&#xA;
         &quot;LEFT OUTER JOIN dbo.Icd9cm a3 ON a3.icd9_code = cad.axis_code AND cad.axislevel = 3 &quot; +&#xD;&#xA;
         &quot;LEFT OUTER JOIN dbo.ICD10View i10 ON i10.icd10_code = cad.icd10_code &quot; +&#xD;&#xA;
         &quot;WHERE ca.active_flag = 1 AND ca.client_id = :ClientId&quot; +&#xD;&#xA;
         &quot; ORDER BY cad.axislevel, cad.axisorder &quot;;&#xD;&#xA;
&#xD;&#xA;
      var query = qie.getParameterizedQuery(sqlString);&#xD;&#xA;
&#xD;&#xA;
      // Add paramaters values.&#xD;&#xA;
&#xD;&#xA;
      query.setString('ClientId', client_id);&#xD;&#xA;
&#xD;&#xA;
      var queryResult = query.doQuery(database, true);&#xD;&#xA;
&#xD;&#xA;
      // If sample message generation is enabled, create a phi free sample record.&#xD;&#xA;
&#xD;&#xA;
      if (fn_is_sample_message_enabled()) {&#xD;&#xA;
         queryResult = create_sample_data(queryResult);&#xD;&#xA;
&#xD;&#xA;
         // TODO: Set whatever custom sample data create_sample_data does not handle         &#xD;&#xA;
         // queryResult.setNode(&quot;node_name&quot;,[value], 1);&#xD;&#xA;
&#xD;&#xA;
      }&#xD;&#xA;
 &#xD;&#xA;
      queryResult = fn_escape_reserved_hl7_characters(queryResult);&#xD;&#xA;
&#xD;&#xA;
      qie.debug(&quot;Resultset returned: &quot; + queryResult.getNode(&quot;/&quot;));&#xD;&#xA;
      qie.info(&quot;Diagnosis Found: &quot; + queryResult.getRowCount());&#xD;&#xA;
&#xD;&#xA;
      return queryResult;&#xD;&#xA;
   }&#xD;&#xA;
   catch (e) {&#xD;&#xA;
      qie.error(&quot;Error in da_fetch_DiagInfo_ByClientId.  STACKTRACE:  &quot; + e);&#xD;&#xA;
      return NO_DATA;&#xD;&#xA;
   }&#xD;&#xA;
}&#xD;&#xA;
">
      <parameter order="1" name="client_id" />
    </publishedFunction>
    <variable referenceId="8a4a94c87c7f1f0a017c9dbe094f0169" name="HL7_CODE_VERSION" description="A manual version number, reved by development as an attempt to know what code has been promoted to each environment." type="5" txtType="1" value="484C3720436F64652056657273696F6E3A2032303231313231375F31323A32323A333620455354" firstRowIsHeader="true" allowScriptUpdates="true" useVariableSource="false" />
  </zone>
</objects>
